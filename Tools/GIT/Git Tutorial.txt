Workspace (Working directory) -> Staging area -> LocalRepo (GIT) -> RemoteRepo (GITHUB)
--
init
status
add
commit
log
config

------
git init
git status
git add : add files from workspace to staging area 
	- git add -a : all files
	- git add . : all files
	- git add * : all files
	- git add abc.txt xyz.txt 	: specific file
	
3] LocalRepo :
	before move files from local to staging, need to provide some configurations
	-> configuration commands needs only first time
	- git config --global user.email "Sagar.patil@abc.com"
	- git config --global user.name "Sagar"
	once configuration is done, then we can perform git operations.
	- git commit -m "mandatory comment" 

	----------------------
	
git log :
	show how many commits done.
	- git log --oneline : show commit id
	
If we modify any files, and moves to local repo
	- Wrong :
		git add abc.txt xyz.txt  // this files are already added
		git commit -m "comment"
		
	- use :
		git add . // to add data into staging
	
	-For Workspace to LocalRepo :
		- git commit -a -m "commiting modified files"
			- a : means moves into staging area
			- m : means provide message for commit
			
=======================
Part 4 :
- Git diff :	
	used to compare file between any 2 area :
		working dir -> staging -> localRepo -> remoteRepo
	1. working dir and staging	
		git diff index.txt
	2. working dir AND localRepo
		git diff HEAD index.txt
	3. staging AND localRepo
		git diff --staged HEAD index.txt
		git diff --chached HEAD index.txt

Part 5 :
- Git rm :
	ls : see all files in working dir
	git ls-files : see all files in staging area
	
	1. Remove files from both staging and workspace
		- git rm file1.txt 
		- git rm -r .		// all files
	2. Remove files from only from staging 
		- git rm --cached file1.txt 	//--cached refer to staging area
	3. Remove files only working dir
		- rm file1.txt
---------
Part 6 :
git Checkout :
	- We can use checkout to discard unstaged changes in the tracked files of working dir
		- git checkout --file1.txt
	- file is available in staging and local repo, and we did changes in WS , then we can undo it using checkout command.
	

----
1. git init: This command is used to start a new repository.
2. git clone <git-repo-url>: This command is used to obtain a repository from an existing URL.
3. git add <file1, file2,...>  / git add .: This command adds a file to the staging area.
4. git commit -m "message": This command records the changes made to the files to a local repository.
5. git status: This command lists all the files that have to be committed.
6. git push <remote> <branch-name>: This command sends the committed changes of master branch to your remote repository.
7. git pull <remote> <branch-name>: This command fetches and merges changes on the remote server to your working directory.
8. git reset: This command resets your index and working directory to the state of your last commit.
10. git checkout <branch-name>: This command is used to switch from one branch to another.
11. git checkout -b <new-branch-name>: This command creates -b <new-branch-name>: This command creates a new branch and also switches to it.
12. git merge <branch-name>: This command merges the specified branchâ€™s history into the current branch.
9. git branch: This command lists all the local branches in the current repository.
- git branch -d <branch-name>: This command deletes the specified branch.
- git branch -D <branch-name>: This command forces delete the specified branch.




1. Working directory
	- codebase where we are working (system like Laptop/Desktop)
	- git init : to create a new repository
	- git clone <repo_url> : to obtain a repository from an existing URL
	- git status : to check the status of the working directory
	- git branch : to list all the branches in the repository
	- git add: to add files from the working directory to the staging area
		- git add -A : to add all files
		- git add . : to add all files
		- git add <file-name> : to add a specific file
	- git commit
		- git commit -m "message" 		: to commit the changes from the staging directory to the local repository
		- git commit -a -m "message" 	: to commit the changes from the working directory to the local repository
	- git switch : only to switch between branches
		- git switch -c <branch-name> : to create a new branch and switch to it
		- git switch <branch-name> : to switch to an existing branch
	- git checkout : to switch between branches or commits
		- git checkout -b <branch-name> : to create a new branch and switch to it
		- git checkout <branch-name> : to switch/Checkout to an existing branch
		- git checkout <commit-hash> : to switch/Checkout to a specific commit
	- git reset <commit> :	reset the commit
		1. git reset --soft: Undo commits but keep changes staged.
		2. git reset --mixed: Undo commits and unstage changes (but keep the changes in your working directory). This is the default behavior if no option is specified.
		3. git reset --hard: Undo commits and unstage changes and delete all changes in your working directory.
	- git merge <branch-name> : to merge the specified branch's history into the current branch
	- git revert <commit> : to revert the commit
	- git log:
		- git log : to view the commit history
		- git log --oneline : to view the commit history in a single line
	- git config --global user.name "name" : to set the global name
	- git config --global user.email "email" : to set the global email
	- git pull:
		- git pull: to fetch and merge changes from the remote server to the working directory
		- git pull origin <branch-name> : to fetch and merge changes from the remote server to the working directory
2. Staging area:
3. Local repository:
	- git push origin <branch-name> : to push the committed changes from the local repository to the remote repository
4. Remote repository
