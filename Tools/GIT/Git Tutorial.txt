Workspace (Working directory) -> Staging area -> LocalRepo (GIT) -> RemoteRepo (GITHUB)
--
inti 
status
add
commit
log
config

------
git init
git status
git add : add files from workspace to staging area 
	- git add -a : all files
	- git add . : all files
	- git add * : all files
	- git add abc.txt xyz.txt 	: specific file
	
3] LocalRepo :
	befor move files from staging to local, need to provice some configurations
	-> configuration commands needs only first time
	- git config --global user.email "Sagar.patil@abc.com"
	- git config --global user.name "Sagar"
	then
	- git commit -m "mandatory comment" 

	----------------------
	
git log :
	show how many commits done.
	- git log --oneline : show commit id
	
If we modify any files, and moves to local repo
	- Wrong :
		git add abc.txt xyz.txt  // this files are already added
		git commit -m "comment"
		
	- use :
		git add . // to add data into staging
	
	-For Workspace to LocalRepo :
		- git commit -a -m "commiting modified files"
			- a : means moves into staging area
			- m : means movies into local repo
			
=======================
Part 4 :
- Git diff :	
	used to compare file between any 2 area :
		working dir -> staging -> localRepo -> remoteRepo
	1. working dir and staging	
		git diff index.txt
	2. working dir AND localRepo
		git diff HEAD index.txt
	3. staging AND localRepo
		git diff --staged HEAD index.txt
		git diff --chached HEAD index.txt

Part 5 :
- Git rm :
	ls : see all files in working dir
	git ls-files : see all files in staging area
	
	1. Remove files from both staging and workspace
		- git rm file1.txt 
		- git rm -r .		// all files
	2. Remove files from only from staging 
		- git rm --cached file1.txt 	//--cached refer to staging area
	3. Remove files only working dir
		- rm file1.txt
---------
Part 6 :
git Checkout :
	- We can use checkout to discard unstaged changes in the tracked files of working dir
		- git checkout --file1.txt
	- file is available in staging and local repo, and we did changes in WS , then we can undo it using checkout command.
	

----
1. git init: This command is used to start a new repository.
2. git clone <git-repo-url>: This command is used to obtain a repository from an existing URL.
3. git add <file1, file2,...>  / git add .: This command adds a file to the staging area.
4. git commit -m "message": This command records the changes made to the files to a local repository.
5. git status: This command lists all the files that have to be committed.
6. git push <remote> <branch-name>: This command sends the committed changes of master branch to your remote repository.
7. git pull <remote> <branch-name>: This command fetches and merges changes on the remote server to your working directory.
8. git reset: This command resets your index and working directory to the state of your last commit.
10. git checkout <branch-name>: This command is used to switch from one branch to another.
11. git checkout -b <new-branch-name>: This command creates -b <new-branch-name>: This command creates a new branch and also switches to it.
12. git merge <branch-name>: This command merges the specified branchâ€™s history into the current branch.
9. git branch: This command lists all the local branches in the current repository.
- git branch -d <branch-name>: This command deletes the specified branch.
- git branch -D <branch-name>: This command forces delete the specified branch.
