pom.xml:
--------
    - spring-boot-starter-web
    - spring-boot-starter-data-jpa
    - mysql-connector-j
-----------------------
application.properties:
-----------------------
spring.application.name=JpaDemo
server.port=8080

spring.datasource.name=test
spring.datasource.url=jdbc:mysql://localhost:3306/jpaDb
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=create


-----------
Controller:
-----------
package com.springboot.web.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.springboot.web.Services.UserService;
import com.springboot.web.entities.User;

import jakarta.websocket.server.PathParam;

@RestController
@RequestMapping("/users")
public class UserController {
	@Autowired
	UserService service;

	@RequestMapping(value = "", method = RequestMethod.GET)
	public ResponseEntity<List<User>> getAllUserss() {
		List<User> users = service.getAllUsers();

		if (users.size() <= 0) {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).build(); // build will create new object and return
		}
		return ResponseEntity.of(Optional.of(users));
	}

	@GetMapping("/{userId}")
	public ResponseEntity<User> getUser(@PathVariable("userId") Integer userId) {
		return service.getUser(userId);
	}

	@PostMapping("")
	public ResponseEntity<User> saveUser(@RequestBody User user) {
		return service.saveUser(user);
	}

	@DeleteMapping("/{userId}")
	public ResponseEntity<User> deleteUser(@PathVariable("userId") int userId) {
		return service.deleteUser(userId);
	}

	@PutMapping("")
	public ResponseEntity<User> updateUser(@RequestBody User user) {
		User u1 = service.updateUser(user);
		return ResponseEntity.of(Optional.of(u1));
	}

}


------------------
Service interface:
------------------
package com.springboot.web.Services;
import java.util.List;
import org.springframework.http.ResponseEntity;
import com.springboot.web.entities.User;

public interface UserService {
	ResponseEntity<User> saveUser(User user);
	User updateUser(User user);
	List<User> getAllUsers();
	ResponseEntity<User> getUser(int userId);
	ResponseEntity<User> deleteUser(int userId);
}

-----------------------
Service implementation:
-----------------------
package com.springboot.web.ServicesImpl;

import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import com.springboot.web.Services.UserService;
import com.springboot.web.dao.UserRepository;
import com.springboot.web.entities.User;

@Service
public class UserServiceImpl implements UserService {

	@Autowired
	UserRepository userDb;
	@Override
	public ResponseEntity<User> saveUser(User user) {
		User userResult = userDb.save(user);
		return ResponseEntity.of(Optional.of(userResult));
	}

	@Override
	public User updateUser(User user) {
		User userResult = userDb.save(user);
		return userResult;
	}

	@Override
	public List<User> getAllUsers() {
		List<User> users = userDb.findAll();
		return users;
	}

	@Override
	public ResponseEntity<User> getUser(int userId) {
		Optional<User> userOptional = userDb.findById(userId);
		if (userOptional.isPresent()) {
	        return ResponseEntity.of(Optional.of(userOptional.get()));// Return the User object if it exists
	    } else {
	        return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
	    }
	}

	@Override
	public ResponseEntity<User> deleteUser(int userId) {
		Optional<User> userOptional = userDb.findById(userId);
		if (userOptional.isPresent()) {
			userDb.delete(userOptional.get());
	        return ResponseEntity.of(Optional.of(userOptional.get()));// Return the User object if it exists
	    } else {
	        return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
	    }
	}

}


-----------------------------
interface UserRepository implementation of JpaRepository:
-------------------------
package com.springboot.web.dao;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.CrudRepository;

import com.springboot.web.entities.User;

//public interface UserRepository extends CrudRepository<User, Integer> {
	public interface UserRepository extends JpaRepository<User, Integer> {

}
