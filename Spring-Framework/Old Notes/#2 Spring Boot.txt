Spring Boot :
	-> Spring Framework 
	  + Embedded HTTP Servers (Tomcat, jetty) 
	  - XML <bean> Configuration or @Configuration 
	  = Spring Boot

@Component 
class Car {}
	- on the class
	- here default object name is "car" in smallcase.
	- automatically create the object of the class

---------------------------

@Component("mycarobj")
class Car {}
	-- here default object name is "mycarobj".
=====================================================
@Autowired :
	- it searches the object by object type
	- On the Composition (has a inteface) object
	- tells that , its a object of another class
---------------------------
@Autowired
@Qualifier("obj1") :
	- It searches the object by object name
	- On the Composition (has a inteface) object
	- tells that , its a object of another class

---------------------------
@RestController :
	- It is a combination of @Controller and @ResponseBody
	- It is used to create REST API
	- means class always return Response  ie @ResponseBody, not view ie only @Controller

---------------------------

@GetMapping("/books/{id}")
public Book getBook( @PathVariable("id") int id ) {}

@PostMapping("/book")
public Book getBook( @RequestBody Book book ) {}

@PutMapping("/book/{bookId}")
public Book updateBook(@RequestBody Book book 
					, @PathVariable("bookId") int bookId)  {}

---------------------------
Valid HTTP Status Code :
	POST 		: 	201
	GET   (One)	:	200
	PUT			:	200
	DELETE		:	204
	GET   (All)	:	200 , 204 , 206
		
	to call those code or error msg use 'ResponseEntity' class
	ResponseEntity : Handling HttpStatus while creating REST API
	
--------------------------
Jackson - Bidirectional Relationships :
	- avoid nested calling using following annotations
		@JsonManagedReferences
		@JsonBackReferences
	
  eg:
	class Book{
		@OneToOne(cascade = CascadeType.ALL)
		@JsonManagedReferences		//capture Obj and convert into Json
		private Author author;
	}
	class Author{
		@OneToOne(mappedBy = "author")
		@JsonBackReferences			//dont capture Obj so its not convert into Json
		private Book book;
	}
	
------------------
Dependencies :
	Devtool Dependency : if automatically refresh/reloads spring project
	For Validation on server side :	
		- Bean Validation API								//Its a specifications.
		- Hibernate Validator Engine Relocation Artifact	//Its an implementations.